// S1: scheduler experient one

use { round } from core::math

use { yield, sleep, current_time } from ksp::game
use { Vessel } from ksp::vessel
use { CONSOLE } from ksp::console

use { Common } from fx::common

struct S1state(common: Common) {
    common : Common = common
    vessel : Vessel = common.vessel
}

sync fn fwd_sync(s1state: S1state, dt: float) -> float = {
    CONSOLE.print_line("fwd_sync")
    s1state.s1_sync(dt) }

fn fwd_async(s1state: S1state, dt: float) -> float = {
    CONSOLE.print_line("fwd_async")
    s1state.s1_async(dt) }

impl S1state {

    sync fn s1_sync(self, dt: float) -> float = {
        // This is the common form for the functions that are used
        // to implement mission sequencing and background tasks:
        // start up, observe, compute, store results, done.
        // currently, we can successfully do indirect calls
        // but only to synchronous functions.
        //
        CONSOLE.print_line("s1state.s1_sync")
        round(200.0 * dt) / 100.0 }

    fn s1_async(self, dt: float) -> float = {
        // This is the less common form the functions that are used
        // to implement mission sequencing and background tasks:
        // as above, but also make calls like vessel.staging.next()
        // that are ASYNC, forcing this method to be async.
        //
        // currently I have found no way to set up an indirect calling
        // mechanism that stores and calls through references to ASYNC
        // functions.
        //
        CONSOLE.print_line("s1state.s1_async")
        if (dt < 0) self.vessel.staging.next()
        round(200.0 * dt) / 100.0 }

    fn run_it_with_s1(self, dt: float, task: fn(S1state, float) -> float) -> float = {
        CONSOLE.print_line("s1state.run_it_with_s1")
        let result = task(self, dt)
        CONSOLE.print_line("s1state.run_it_with_s1 result is " + result.to_string())
        return result }

    fn run_it_without_s1(self, dt: float, task: fn(float) -> float) -> float = {
        CONSOLE.print_line("s1state.run_it_without_s1")
        let result = task(dt)
        CONSOLE.print_line("s1state.run_it_without_s1 result is " + result.to_string())
        return result }

    fn run(self) -> float = {

        const s1 : S1state = self

        let dt = 0.17

        CONSOLE.print_line("")
        CONSOLE.print_line("s1state.run call 1")
        // reference code, works. canary test in case I break someting fundamental.
        dt = self.run_it_with_s1(dt, fn(s, dt) -> s.s1_sync(dt))
        CONSOLE.print_line("s1state.run call 1 returned " + dt.to_string() + " to run")

        CONSOLE.print_line("")
        CONSOLE.print_line("s1state.run call 2")
        // reference code, works. canary test in case I break someting fundamental.
        dt = self.run_it_with_s1(dt, fn(s, dt) -> fwd_sync(s, dt))
        CONSOLE.print_line("s1state.run call 2 returned " + dt.to_string() + " to run")

        CONSOLE.print_line("")
        CONSOLE.print_line("s1state.run call 3")
        // reference code, works: can pass the name of a sync function.
        dt = self.run_it_with_s1(dt, fwd_sync)
        CONSOLE.print_line("s1state.run call 3 returned " + dt.to_string() + " to run")

        // CONSOLE.print_line("")
        // CONSOLE.print_line("s1state.run call 3a")
        // I want to pass ASYNC functions to indirect callers.
        // KontrolSystem 0.2.2: this compiles and runs without reporting errors,
        //   but does not execute fwd_async and the value of "dt" is not modified.
        // KontrolSystem 0.2.3: compiles, but at runtime triggers
        //   Invalid IL code in FX__S1/AsyncFunction_S1STATE_run:PollValue (): IL_01c2: stloc.s 8
        // KontrolSystem 0.3.3: does not compile, generates the error
        //   Argument task of 'S1state.run_it_with_s1' has to be a sync fn(fx::s1::S1state, float) -> float, but got fn(fx::s1::S1state, float) -> float
        // dt = self.run_it_with_s1(dt, fwd_async)
        // CONSOLE.print_line("s1state.run call 3a returned " + dt.to_string() + " to run")

        // CONSOLE.print_line("")
        // CONSOLE.print_line("s1state.run call 4")
        // Not (yet?) a feature.
        // KontrolSystem 0.2.2 - 0.2.3: compiles without error.
        //   if executed, will cause *this* function to return.
        // KontrolSystem 0.3.3: does not compile generates the error
        //   Type 'S1state' does not have a field 's1_sync'
        // dt = self.run_it_with_s1(dt, s1.s1_sync)
        // CONSOLE.print_line("s1state.run call 4 returned " + dt.to_string() + " to run")

        // CONSOLE.print_line("")
        // CONSOLE.print_line("s1state.run call 4a")
        // Not (yet?) a feature.
        // KontrolSystem 0.2.2 - 0.2.3: compiles without error.
        //   if executed, will cause *this* function to return.
        // KontrolSystem 0.3.3: does not compile generates the error
        //   Type 'S1state' does not have a field 's1_async'
        // dt = self.run_it_with_s1(dt, s1.s1_async)
        // CONSOLE.print_line("s1state.run call 4a returned " + dt.to_string() + " to run")

        // CONSOLE.print_line("")
        // CONSOLE.print_line("s1state.run call 5")
        // Not (yet?) a feature.
        // KontrolSystem 0.2.2 - 0.2.3: compiles without error.
        //   if executed, will cause *this* function to return.
        // KontrolSystem 0.3.3: does not compile generates the error
        //   Type 'S1state' does not have a field 's1_sync'
        // dt = self.run_it_without_s1(dt, s1.s1_sync)
        // CONSOLE.print_line("s1state.run call 5 returned " + dt.to_string() + " to run")

        // CONSOLE.print_line("")
        // CONSOLE.print_line("s1state.run call 5a")
        // Not (yet?) a feature.
        // KontrolSystem 0.2.2 - 0.2.3: compiles without error.
        //   if executed, will cause *this* function to return.
        // KontrolSystem 0.3.3: does not compile generates the error
        //   Type 'S1state' does not have a field 's1_async'
        // dt = self.run_it_without_s1(dt, s1.s1_async)
        // CONSOLE.print_line("s1state.run call 5a returned " + dt.to_string() + " to run")

        CONSOLE.print_line("")
        CONSOLE.print_line("s1state.run done")
        dt }
}

pub fn main_flight( vessel: Vessel) -> Result<Unit, string> = {
    const common = Common(vessel)
    const s1state : S1state = S1state(common)

    CONSOLE.clear()
    CONSOLE.print_line("s1 testing ...")
    let result = s1state.run()
    CONSOLE.print_line("")
    CONSOLE.print_line("s1 testing done, returned " + result.to_string())
}
