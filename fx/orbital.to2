// ORBITAL: provide mission sequence plan steps for orbit.
// This includes getting into the initial orbit.

use { sqrt, max, min, round } from core::math

use { Vec3, vec3 } from ksp::math
use { CONSOLE } from ksp::console
use { current_time } from ksp::game
use { Vessel, AutopilotMode } from ksp::vessel

use { Common } from fx::common

// The Orbital object carries shared data that are needed by
// the main sequence mission plan steps for orbit. This
// includes planning information on where we are intending
// to circularlize.


pub struct Orbital(common: Common) {
    common : Common = common

    mode : int = 0
    // mode 0: nothing happening
    // mode 1: planned circ_ut burn
    // mode 2: execute circ_ap burn
    mode_met : float = 0.0

    chat_met : float = 0.0

    burn_ut : float = 0.0
    burn_dv : Vec3 = vec3(0,0,0)

    circ_continue : bool = false
}

impl Orbital {

    // orbital.circ_dv(): compute DV to circularize.
    //
    // Using mu and r0 from the body we are orbiting,
    // compute the circular speed at our altitude,
    // and construct the desired velocity vector
    // of that length matching our lateral direction.
    // Return the difference from our current velocity
    // to that vector, which is the minimum DV we need
    // to burn to be in a circular orbit.

    sync fn circ_dv(self) -> Vec3 = {
        const common = self.common
        const vessel = common.vessel
        const body = vessel.main_body
        const r0 = body.radius
        const mu = body.grav_parameter

        const radius = r0 + vessel.altitude_sealevel
        const vcirc = sqrt(mu / radius)
        const vold = vessel.orbital_velocity
        const vhat = vessel.up.exclude_from(vold).normalized
        const vnew = vhat * vcirc
        const dv = vnew - vold

        dv }

    // orbital.circ_ut(): circularize at a specified universal time.
    //
    // NOTE: does not use a maneuver node. to execute a maneuver node
    // requires an error controller reducing a "remaining DV" vector
    // to zero. If we spend just a little more time updating the target
    // velocity, we turn into an error controler that controls the error
    // in our eccentricity, giving us a much better final result.

    sync fn circ_ut(self) -> float = {
        const common = self.common
        const vessel = common.vessel
        const met = common.met()

        if (self.mode != 1) {
            self.mode = 1
            self.mode_met = met
            self.circ_continue = true

            self.burn_dv = self.circ_dv()
            vessel.autopilot.mode = AutopilotMode.Autopilot
            vessel.autopilot.target_orientation = self.burn_dv

            common.set_throttle_provider(fn (dt) -> {
                const dv = self.circ_dv()

                self.burn_dv = dv

                vessel.autopilot.target_orientation = dv

                if (current_time() < self.burn_ut) {
                    return 0.0 }

                const max_th = max(1.0, vessel.available_thrust)
                const cmd_th = dv.magnitude * vessel.mass / max_th
                const lim_th = max(0.0, min(1.0, cmd_th))

                if (lim_th < 0.01)
                    self.circ_continue = false

                const aerr = vessel.facing.vector.angle_to(dv)
                const afrac = max(0.01, min(1, (5.0 - aerr) / 4.0))

                afrac * lim_th })
        }

        if (self.circ_continue) {
            return 1.0 }

        common.set_throttle_value(0.0)
        vessel.autopilot.enabled = true
        vessel.autopilot.mode = AutopilotMode.Prograde

        CONSOLE.print_line("circularization complete")

        0.0 }

    // orbital.circ_ap(): circularize at apoapsis.
    //
    // Uses the next apoapsis, unless it is too soon,
    // in which case do it at the one after.
    //
    // NOTE: it might be better to start slightly earlier, but
    // it turns out that computing the Delta V and splitting it
    // across the AP instant is not as good as just starting at
    // the AP time itself.

    sync fn circ_ap(self) -> float = {

        if ((self.mode != 1) && (self.mode != 2)) {
            const common = self.common
            const vessel = common.vessel
            const orbit = vessel.orbit
            const t = current_time()
            const met = common.met()

            self.mode = 2
            self.mode_met = met

            CONSOLE.print_line("circularizing at AP")

            // The "10" is plucked out of thin air, but seems to work
            // better than either "burn starts at AP" or "split the DV
            // to be half-befor and half-after predicted AP"

            self.burn_ut = orbit.next_apoapsis_time(t + 30).value - 10

            // TODO if we would get to periapsis before apoapsis,
            // then DO IT NOW because our number one use case here
            // is when our periapsis is within atmosphere, or even
            // underground. Going around is not an option.
            //
            // Satisfy the above TODO the first time we have a vessel
            // that doesn't have 30 seconds before AP when we get into
            // the circ_ap, and can't afford to wait for the next AP.
        }

        self.circ_ut() }

    // Open for expansion. Intending to add entry points here for
    // circularize at next PE, and the more general "adjust orbit
    // at given UT to have specified PE and AP" ... and maybe the
    // variant of that where the burn happens at a specified altitude.
    //
    // Perhaps also the stationkeeping -- "wherever you are, try to
    // make the orbit have this PE and AP, but match the SMA if you
    // are outside those altitudes."
}
