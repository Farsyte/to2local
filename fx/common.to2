use { CONSOLE } from ksp::console
use { Vessel } from ksp::vessel
use { current_time } from ksp::game

use { Sequencer } from fx::sequencer

pub struct Common(vessel: Vessel) {
    vessel : Vessel = vessel
    sequencer : Sequencer = Sequencer(vessel)

    t0 : float = current_time() + 3600.0
    launch_azimuth: float = 90.0
    launch_altitude: float = 80000.0
}

impl Common {

    // proxy the throttle manipulations.
    sync fn set_throttle_value(self, value: float) -> Common = {
        self.sequencer.set_throttle_value(value)
        self }

    // proxy the stage_{pending,request,cancel} API through to sequencer,
    // so that code using Common does not need to know who is actually
    // supplying the staging service.
    sync fn stage_pending(self) -> bool = {
        self.sequencer.stage_pending() }
    sync fn stage_request(self) -> Common = {
        self.sequencer.stage_request()
        self }
    sync fn stage_cancel(self) -> Common = {
        self.sequencer.stage_cancel()
        self }

    // Provide the "loop" entry point that takes over control of the main
    // thread to allow execution of async services. Delegate the loop
    // execution down to the sequencer.
    fn loop(self) -> Common = {
        self.sequencer.loop()
        self }

    sync fn met(self) -> float = {
        current_time() - self.t0 }

    sync fn run_at(self, eta: float, name: string, task: fn() -> float) -> Common = {
        self.sequencer.run_at(eta, name, task)
        self }

    sync fn next_seq(self, task: fn() -> float) -> Common = {
        self.sequencer.next_seq(task)
        self }

}
