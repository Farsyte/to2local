
use { CONSOLE } from ksp::console

// Log: a log of text lines that can be reviewed.

type LogLineRef = Option<LogLine>

// KontrolSystem2 type inferrance fails on this kind of initialization:
//     next : Option<LogLine> = None()
const noLine : LogLineRef = None()

struct LogLine(text: string) {
    next : LogLineRef = noLine
    text : string = text
}

pub struct Log {
    top : Option<LogLine> = noLine
    end : Option<LogLine> = noLine
    count : int = 0
}

impl Log {
    sync fn lines(self) -> int = {
        self.count }

    sync fn clear(self) -> Log = {
        self.top = noLine
        self.end = noLine
        self.count = 0
        self }

    sync fn empty(self) -> bool = {
        !self.top.defined }

    sync fn add(self, text: string) -> Log = {
        // used by BIST. must be tested outside the BIST framework.
        const bllr : LogLineRef = Some(LogLine(text))
        if (self.end.defined) self.end.value.next = bllr
        if (!self.top.defined) self.top = bllr
        self.end = bllr
        self.count += 1
        self }

    sync fn pop(self) -> Option<string> = {
        // used by BIST. must be tested outside the BIST framework.
        if (self.empty()) {
            None() }

        else {
            const ll = self.top.value
            self.top = ll.next
            self.count -= 1
            Some(ll.text) } }

    fn print(self) -> Log = {
        // the effect of this function is not something that can
        // be tested during automation -- at best, we can exercise
        // it and ask the flight engineer to confirm operation.
        let llr = self.top
        while (llr.defined) {
            const ll : LogLine = llr.value
            CONSOLE.print_line(ll.text)
            llr = ll.next }

        self }

}
