
// tinker: a place for me to scribble my experiments.

use { Vessel, MODE_RADIALOUT, MODE_STABILITYASSIST } from ksp::vessel
use { CONSOLE } from ksp::console
use { vec3 } from ksp::math
use { yield, sleep, current_time } from ksp::game

use { Common } from fx::common

use { Launch } from fx::launch
use { Ascent } from fx::ascent
use { Stager } from fx::stager
use { Orbital } from fx::orbital

use { Bist } from fx::bist
use { all_test } from fx::all_bist

pub struct TinkerMission(common: Common) {
    common : Common = common
    vessel : Vessel = common.vessel

    stager : Stager = Stager(common)
    launch : Launch = Launch(common)
    ascent : Ascent = Ascent(common)
    orbital : Orbital = Orbital(common)
}

impl TinkerMission {

    sync fn next_seq(self, task: fn() -> float) -> Unit = {
        self.common.next_seq(task)
    }
    sync fn run_at(self, eta: float, name: string, task: fn() -> float) -> Unit = {
        self.common.run_at(eta, name, task)
    }

    fn loop(self) -> Unit = {
        self.common.loop()
    }
}

fn tinker_bist(vessel: Vessel) -> Result<Unit, string> = {

    CONSOLE.print_line("")
    CONSOLE.print_line("Running BIST before staring ...")

    const bist : Bist = Bist()
    const result = all_test(bist, vessel)
    if (result.success) {
        CONSOLE.print_line("PASS all_bist")
        CONSOLE.print_line("")
    } else {
        CONSOLE.print_line("")
        CONSOLE.print_line("complete bist log ...")
        bist.print()
        CONSOLE.print_line("complete bist log ... done")
        CONSOLE.print_line("")
        CONSOLE.print_line("FAIL " + result.error)
        CONSOLE.print_line("")
        Err(result.error)
    }
}

pub fn main_flight( vessel: Vessel, target_apoapsis: float = 80000.0, heading: float = 90.0 ) -> Result<Unit, string> = {
    CONSOLE.clear()
    CONSOLE.print_line("Hello from Vessel: " + vessel.name)

    tinker_bist(vessel)

    const mission = TinkerMission(Common(vessel))

    // I was hoping that "mission.launch.manual"
    // was actually of type "fn () -> bool" but alas
    // it is not.
    //
    // Trying to write
    //    mission.add(mission.launch.manual)
    // gives us the error
    //    Type fx::launch::Launch does not have a field 'manual'
    //
    // So, basically, I exchanged a one-line call into mission
    // to repeatedly call a lambda until done, with a one-line
    // call into mission to stash this on a list.
    //
    // Why? Well, in theory, this means I can manipulate the
    // mission plan after initial construction, possibly even
    // during execution.

    mission.next_seq(fn () -> mission.launch.manual())
    mission.next_seq(fn () -> mission.launch.liftoff())
    mission.next_seq(fn () -> mission.ascent.gravityturn())
    mission.next_seq(fn () -> mission.ascent.spacecoast())
    mission.next_seq(fn () -> mission.orbital.circ_ap())

    mission.run_at(1.0, "stage", fn () -> mission.stager.stage_check())

    mission.loop()
    CONSOLE.print_line("mission plan complete")
}
